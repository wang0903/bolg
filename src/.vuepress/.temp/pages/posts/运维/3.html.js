export const data = JSON.parse("{\"key\":\"v-995424bc\",\"path\":\"/posts/%E8%BF%90%E7%BB%B4/3.html\",\"title\":\"用docker搭建minio文件服务器\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"pen-to-square\",\"date\":\"2024-01-12T00:00:00.000Z\",\"category\":[\"minio文件服务器\"],\"tag\":[\"minio\",\"Ubuntu22.04\",\"minio文件服务器\"],\"star\":true,\"sticky\":true,\"description\":\"用docker搭建minio文件服务器 1、使用docker-compose搭建，创建docker-compose.yml version: '3' # 使用Docker Compose的版本，当前为3。 services: minio: # 定义一个名为minio的服务。 image: minio/minio # 使用MinIO官方镜像。 container_name: minio # 为容器指定一个名称。 environment: TZ: Asia/Shanghai #设置时区 MINIO_ROOT_USER: admin # 设置MinIO的根用户用户名。 MINIO_ROOT_PASSWORD: 123456 # 设置MinIO的根用户密码。 volumes: - ./data:/data # 将MinIO容器的数据卷映射到相对于docker-compose.yml文件的./data目录。 ports: - \\\"9000:9000\\\" # 映射容器端口9000到主机端口9000，用于MinIO对象存储。 - \\\"9090:9090\\\" # 映射容器端口9090到主机端口9090，用于MinIO控制台。 restart: always # 始终在容器退出时重新启动容器。 command: server /data --console-address \\\":9090\\\" # 启动MinIO容器并指定数据目录和控制台端口。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://mister-hope.github.io/posts/%E8%BF%90%E7%BB%B4/3.html\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"用docker搭建minio文件服务器\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"用docker搭建minio文件服务器 1、使用docker-compose搭建，创建docker-compose.yml version: '3' # 使用Docker Compose的版本，当前为3。 services: minio: # 定义一个名为minio的服务。 image: minio/minio # 使用MinIO官方镜像。 container_name: minio # 为容器指定一个名称。 environment: TZ: Asia/Shanghai #设置时区 MINIO_ROOT_USER: admin # 设置MinIO的根用户用户名。 MINIO_ROOT_PASSWORD: 123456 # 设置MinIO的根用户密码。 volumes: - ./data:/data # 将MinIO容器的数据卷映射到相对于docker-compose.yml文件的./data目录。 ports: - \\\"9000:9000\\\" # 映射容器端口9000到主机端口9000，用于MinIO对象存储。 - \\\"9090:9090\\\" # 映射容器端口9090到主机端口9090，用于MinIO控制台。 restart: always # 始终在容器退出时重新启动容器。 command: server /data --console-address \\\":9090\\\" # 启动MinIO容器并指定数据目录和控制台端口。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"微梦蜉蝣\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"minio\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Ubuntu22.04\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"minio文件服务器\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-01-12T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"用docker搭建minio文件服务器\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2024-01-12T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"微梦蜉蝣\\\",\\\"url\\\":\\\"https://mister-hope.com\\\"}]}\"]]},\"headers\":[{\"level\":3,\"title\":\"1、使用docker-compose搭建，创建docker-compose.yml\",\"slug\":\"_1、使用docker-compose搭建-创建docker-compose-yml\",\"link\":\"#_1、使用docker-compose搭建-创建docker-compose-yml\",\"children\":[]},{\"level\":3,\"title\":\"2、启动MinIO容器：在包含docker-compose.yml文件的目录中运行以下命令来启动MinIO容器\",\"slug\":\"_2、启动minio容器-在包含docker-compose-yml文件的目录中运行以下命令来启动minio容器\",\"link\":\"#_2、启动minio容器-在包含docker-compose-yml文件的目录中运行以下命令来启动minio容器\",\"children\":[]}],\"readingTime\":{\"minutes\":0.9,\"words\":270},\"filePathRelative\":\"posts/运维/3.md\",\"localizedDate\":\"2024年1月12日\",\"excerpt\":\"<h1> 用docker搭建minio文件服务器</h1>\\n<h3> 1、使用docker-compose搭建，创建docker-compose.yml</h3>\\n<div class=\\\"language-yaml line-numbers-mode\\\" data-ext=\\\"yml\\\"><pre class=\\\"language-yaml\\\"><code><span class=\\\"token key atrule\\\">version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'3'</span>  <span class=\\\"token comment\\\"># 使用Docker Compose的版本，当前为3。</span>\\n\\n<span class=\\\"token key atrule\\\">services</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">minio</span><span class=\\\"token punctuation\\\">:</span>  <span class=\\\"token comment\\\"># 定义一个名为minio的服务。</span>\\n    <span class=\\\"token key atrule\\\">image</span><span class=\\\"token punctuation\\\">:</span> minio/minio  <span class=\\\"token comment\\\"># 使用MinIO官方镜像。</span>\\n    <span class=\\\"token key atrule\\\">container_name</span><span class=\\\"token punctuation\\\">:</span> minio  <span class=\\\"token comment\\\"># 为容器指定一个名称。</span>\\n    <span class=\\\"token key atrule\\\">environment</span><span class=\\\"token punctuation\\\">:</span>\\n     <span class=\\\"token key atrule\\\">TZ</span><span class=\\\"token punctuation\\\">:</span> Asia/Shanghai <span class=\\\"token comment\\\">#设置时区</span>\\n      <span class=\\\"token key atrule\\\">MINIO_ROOT_USER</span><span class=\\\"token punctuation\\\">:</span> admin  <span class=\\\"token comment\\\"># 设置MinIO的根用户用户名。</span>\\n      <span class=\\\"token key atrule\\\">MINIO_ROOT_PASSWORD</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">123456</span>  <span class=\\\"token comment\\\"># 设置MinIO的根用户密码。</span>\\n    <span class=\\\"token key atrule\\\">volumes</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> ./data<span class=\\\"token punctuation\\\">:</span>/data  <span class=\\\"token comment\\\"># 将MinIO容器的数据卷映射到相对于docker-compose.yml文件的./data目录。</span>\\n    <span class=\\\"token key atrule\\\">ports</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token string\\\">\\\"9000:9000\\\"</span>  <span class=\\\"token comment\\\"># 映射容器端口9000到主机端口9000，用于MinIO对象存储。</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token string\\\">\\\"9090:9090\\\"</span>  <span class=\\\"token comment\\\"># 映射容器端口9090到主机端口9090，用于MinIO控制台。</span>\\n    <span class=\\\"token key atrule\\\">restart</span><span class=\\\"token punctuation\\\">:</span> always  <span class=\\\"token comment\\\"># 始终在容器退出时重新启动容器。</span>\\n    <span class=\\\"token key atrule\\\">command</span><span class=\\\"token punctuation\\\">:</span> server /data <span class=\\\"token punctuation\\\">-</span><span class=\\\"token punctuation\\\">-</span>console<span class=\\\"token punctuation\\\">-</span>address \\\"<span class=\\\"token punctuation\\\">:</span>9090\\\"  <span class=\\\"token comment\\\"># 启动MinIO容器并指定数据目录和控制台端口。</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
