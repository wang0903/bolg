export const data = JSON.parse("{\"key\":\"v-94b3babc\",\"path\":\"/demo/java/1.html\",\"title\":\"根据类型统计重量接口和返回数据\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"pen-to-square\",\"date\":\"2024-01-19T00:00:00.000Z\",\"category\":[\"Java数据更新\"],\"tag\":[\"java\",\"更新数据\"],\"star\":true,\"sticky\":true,\"description\":\"根据类型统计重量接口和返回数据 1、实现方法 @Override public ModuleProcessingFlawResultVO getModuleProcessingFlawListByName(ModuleProcessingFlawRespVO flawRespVO) { String nameFlaw = flawRespVO.getFlaw();//获取前端传回来的缺陷名称 String nameType = flawRespVO.getFlawType();//类型 LocalDateTime nameDateTime = flawRespVO.getFlawSj();//时间 //获取当前时间 LocalDateTime localDateTime = LocalDateTime.now(); //创建构造查询 QueryWrapper&lt;ModuleProcessingFlawDO&gt; queryWrapper = new QueryWrapper&lt;&gt;(); //不传合金时不需要缺陷的显示 if (nameFlaw != null &amp;&amp; !nameFlaw.isEmpty()) { queryWrapper.eq(\\\"flaw\\\", nameFlaw); } List&lt;ModuleProcessingFlawDO&gt; flawDOList = new ArrayList&lt;&gt;(); // 根据传回的类型执行相应的查询 if (\\\"本季度\\\".equals(nameType)) { //对本季度做计算 // 计算本季度的开始日期和结束日期 LocalDateTime startOfQuarter = localDateTime.withMonth(((localDateTime.getMonthValue() - 1) / 3) * 3 + 1).withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0); LocalDateTime endOfQuarter = startOfQuarter.plusMonths(3).minusSeconds(1); // 清空之前的查询条件 queryWrapper.clear(); // 添加时间范围限制 queryWrapper.between(\\\"flaw_sj\\\", startOfQuarter, endOfQuarter); } else if (\\\"本年度\\\".equals(nameType)) { queryWrapper.apply(\\\"YEAR(flaw_sj) = YEAR({0})\\\", localDateTime); } else if (\\\"本月\\\".equals(nameType)) { queryWrapper.apply(\\\"YEAR(flaw_sj) = YEAR({0}) AND MONTH(flaw_sj) = MONTH({0})\\\", localDateTime); } // TODO 添加时间范围限制 if (nameDateTime != null) { queryWrapper.eq(\\\"flaw_sj\\\", nameDateTime); } // 执行查询 flawDOList = moduleProcessingFlawMapper.selectList(queryWrapper); // // 过滤列表，仅包括特定的缺陷，并计算总的flawZzl List&lt;ModuleProcessingFlawDO&gt; filteredFlawDOList = new ArrayList&lt;&gt;(); // 使用Map来跟踪不同缺陷名称的总重量 Map&lt;String, Double&gt; totalFlawZzlMap = new HashMap&lt;&gt;(); for (ModuleProcessingFlawDO flawDO : flawDOList) { String flawName = flawDO.getFlaw(); // 假设 \\\"flaw\\\" 是包含缺陷名称的字段 double flawZzl = flawDO.getFlawZzl(); // 假设 \\\"flawZzl\\\" 是包含flawZzl值的字段 // 检查缺陷名称是否与特定的缺陷匹配 if (\\\"板形不良\\\".equals(flawName) || \\\"针孔超\\\".equals(flawName) || \\\"厚差\\\".equals(flawName) || \\\"杠印\\\".equals(flawName) || \\\"辊印\\\".equals(flawName)) { totalFlawZzlMap.put(flawName, totalFlawZzlMap.getOrDefault(flawName, 0.0) + flawZzl); } } // 将汇总的总重量排序（从大到小） LinkedHashMap&lt;String, Double&gt; sortedTotalFlawZzlMap = totalFlawZzlMap.entrySet().stream() .sorted(Map.Entry.&lt;String, Double&gt;comparingByValue().reversed()) .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -&gt; e1, LinkedHashMap::new)); // 将汇总的总重量赋给TotalWeight double totalWeight = sortedTotalFlawZzlMap.values().stream().mapToDouble(Double::doubleValue).sum(); flawRespVO.setTotalWeight(totalWeight); // 封装结果到自定义对象 FlawResult result = new FlawResult(filteredFlawDOList, sortedTotalFlawZzlMap); // 返回自定义对象 return result; }\"},\"headers\":[{\"level\":3,\"title\":\"1、实现方法\",\"slug\":\"_1、实现方法\",\"link\":\"#_1、实现方法\",\"children\":[]},{\"level\":3,\"title\":\"2、接口的代码\",\"slug\":\"_2、接口的代码\",\"link\":\"#_2、接口的代码\",\"children\":[]}],\"readingTime\":{\"minutes\":1.94,\"words\":582},\"filePathRelative\":\"demo/java/1.md\",\"localizedDate\":\"2024年1月19日\",\"excerpt\":\"<h1> 根据类型统计重量接口和返回数据</h1>\\n<h3> 1、实现方法</h3>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token annotation punctuation\\\">@Override</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">ModuleProcessingFlawResultVO</span> <span class=\\\"token function\\\">getModuleProcessingFlawListByName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ModuleProcessingFlawRespVO</span> flawRespVO<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">String</span> nameFlaw <span class=\\\"token operator\\\">=</span> flawRespVO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFlaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//获取前端传回来的缺陷名称</span>\\n        <span class=\\\"token class-name\\\">String</span> nameType <span class=\\\"token operator\\\">=</span> flawRespVO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFlawType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//类型</span>\\n        <span class=\\\"token class-name\\\">LocalDateTime</span> nameDateTime <span class=\\\"token operator\\\">=</span> flawRespVO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFlawSj</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token comment\\\">//时间</span>\\n        <span class=\\\"token comment\\\">//获取当前时间</span>\\n        <span class=\\\"token class-name\\\">LocalDateTime</span> localDateTime <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">LocalDateTime</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">now</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//创建构造查询</span>\\n        <span class=\\\"token class-name\\\">QueryWrapper</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ModuleProcessingFlawDO</span><span class=\\\"token punctuation\\\">&gt;</span></span> queryWrapper <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">QueryWrapper</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">//不传合金时不需要缺陷的显示</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nameFlaw <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token operator\\\">!</span>nameFlaw<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isEmpty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"flaw\\\"</span><span class=\\\"token punctuation\\\">,</span> nameFlaw<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token class-name\\\">List</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ModuleProcessingFlawDO</span><span class=\\\"token punctuation\\\">&gt;</span></span> flawDOList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 根据传回的类型执行相应的查询</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"本季度\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>nameType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//对本季度做计算</span>\\n            <span class=\\\"token comment\\\">// 计算本季度的开始日期和结束日期</span>\\n            <span class=\\\"token class-name\\\">LocalDateTime</span> startOfQuarter <span class=\\\"token operator\\\">=</span> localDateTime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withMonth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>localDateTime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMonthValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withDayOfMonth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withHour</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withMinute</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">withSecond</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token class-name\\\">LocalDateTime</span> endOfQuarter <span class=\\\"token operator\\\">=</span> startOfQuarter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">plusMonths</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">minusSeconds</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// 清空之前的查询条件</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">clear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// 添加时间范围限制</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">between</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"flaw_sj\\\"</span><span class=\\\"token punctuation\\\">,</span> startOfQuarter<span class=\\\"token punctuation\\\">,</span> endOfQuarter<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"本年度\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>nameType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"YEAR(flaw_sj) = YEAR({0})\\\"</span><span class=\\\"token punctuation\\\">,</span> localDateTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"本月\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>nameType<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"YEAR(flaw_sj) = YEAR({0}) AND MONTH(flaw_sj) = MONTH({0})\\\"</span><span class=\\\"token punctuation\\\">,</span> localDateTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// TODO 添加时间范围限制</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>nameDateTime <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            queryWrapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">eq</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"flaw_sj\\\"</span><span class=\\\"token punctuation\\\">,</span> nameDateTime<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">// 执行查询</span>\\n        flawDOList <span class=\\\"token operator\\\">=</span> moduleProcessingFlawMapper<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectList</span><span class=\\\"token punctuation\\\">(</span>queryWrapper<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//        // 过滤列表，仅包括特定的缺陷，并计算总的flawZzl</span>\\n       <span class=\\\"token class-name\\\">List</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">ModuleProcessingFlawDO</span><span class=\\\"token punctuation\\\">&gt;</span></span> filteredFlawDOList <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 使用Map来跟踪不同缺陷名称的总重量</span>\\n        <span class=\\\"token class-name\\\">Map</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Double</span><span class=\\\"token punctuation\\\">&gt;</span></span> totalFlawZzlMap <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">HashMap</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">ModuleProcessingFlawDO</span> flawDO <span class=\\\"token operator\\\">:</span> flawDOList<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">String</span> flawName <span class=\\\"token operator\\\">=</span> flawDO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFlaw</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 假设 \\\"flaw\\\" 是包含缺陷名称的字段</span>\\n            <span class=\\\"token keyword\\\">double</span> flawZzl <span class=\\\"token operator\\\">=</span> flawDO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFlawZzl</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 假设 \\\"flawZzl\\\" 是包含flawZzl值的字段</span>\\n\\n            <span class=\\\"token comment\\\">// 检查缺陷名称是否与特定的缺陷匹配</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"板形不良\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"针孔超\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"厚差\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"杠印\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">\\\"辊印\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                totalFlawZzlMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">put</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">,</span> totalFlawZzlMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOrDefault</span><span class=\\\"token punctuation\\\">(</span>flawName<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> flawZzl<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n  \\n    <span class=\\\"token comment\\\">// 将汇总的总重量排序（从大到小）</span>\\n    <span class=\\\"token class-name\\\">LinkedHashMap</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Double</span><span class=\\\"token punctuation\\\">&gt;</span></span> sortedTotalFlawZzlMap <span class=\\\"token operator\\\">=</span> totalFlawZzlMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">entrySet</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sorted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Map<span class=\\\"token punctuation\\\">.</span>Entry</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Double</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token function\\\">comparingByValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reversed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">collect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Collectors</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toMap</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Map<span class=\\\"token punctuation\\\">.</span>Entry</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getKey</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Map<span class=\\\"token punctuation\\\">.</span>Entry</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getValue</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>e1<span class=\\\"token punctuation\\\">,</span> e2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-&gt;</span> e1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">LinkedHashMap</span><span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 将汇总的总重量赋给TotalWeight</span>\\n    <span class=\\\"token keyword\\\">double</span> totalWeight <span class=\\\"token operator\\\">=</span> sortedTotalFlawZzlMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">values</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stream</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">mapToDouble</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Double</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">doubleValue</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    flawRespVO<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setTotalWeight</span><span class=\\\"token punctuation\\\">(</span>totalWeight<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 封装结果到自定义对象</span>\\n    <span class=\\\"token class-name\\\">FlawResult</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">FlawResult</span><span class=\\\"token punctuation\\\">(</span>filteredFlawDOList<span class=\\\"token punctuation\\\">,</span> sortedTotalFlawZzlMap<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 返回自定义对象</span>\\n    <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
